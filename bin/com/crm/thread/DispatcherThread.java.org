package com.crm.thread;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueSession;
import javax.jms.Session;
import javax.naming.NamingException;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import com.crm.kernel.message.AlarmMessage;
import com.crm.kernel.message.Constants;
import com.crm.kernel.queue.QueueFactory;
import com.crm.kernel.sql.Database;
import com.crm.thread.util.ThreadUtil;
import com.fss.util.AppException;

import com.fss.thread.ManageableThread;
import com.fss.thread.ThreadConstant;

public class DispatcherThread extends ManageableThread
{
	// //////////////////////////////////////////////////////
	// Thread parameters
	// //////////////////////////////////////////////////////
	public boolean						loadCacheEnable			= false;
	public boolean						alarmEnable				= false;

	public boolean						instanceEnable			= false;
	public String						instanceClass			= "";
	public int							instanceSize			= 0;

	public boolean						neverExpire				= false;

	public boolean						queueDispatcherEnable	= false;
	public boolean						queueInstanceEnable		= false;
	public boolean						temporaryQueue			= false;
	public int							queueMode				= Constants.QUEUE_MODE_MANUAL;
	public String						queuePrefix				= "";
	public String						queueName				= "";
	public String						queueSelector			= "";

	public boolean						logEnable				= false;
	public boolean						displayDebug			= false;
	public String						logLevel				= "error";
	public String						logClass				= "";
	public Logger						log						= Logger.getLogger(DispatcherThread.class);

	public SimpleDateFormat				dateFormat				= new SimpleDateFormat("dd/MM/yyyy");

	public Vector<DispatcherInstance>	instances				= new Vector<DispatcherInstance>();

	// //////////////////////////////////////////////////////
	// Queue variables
	// //////////////////////////////////////////////////////
	public QueueConnection				queueConnection			= null;
	public QueueSession					queueSession			= null;
	public Queue						queueWorking			= null;
	public MessageConsumer				queueConsumer			= null;

	// //////////////////////////////////////////////////////
	// result of process variables
	// //////////////////////////////////////////////////////
	public int							totalCount				= 0;
	public int							successCount			= 0;
	public int							errorCount				= 0;
	public int							bypassCount				= 0;
	public int							insertCount				= 0;
	public int							updateCount				= 0;
	public int							exportCount				= 0;
	public String						minStamp				= "";
	public String						maxStamp				= "";

	// //////////////////////////////////////////////////////
	// batch variables
	// //////////////////////////////////////////////////////
	public int							batchSize				= 1;
	public int							batchCount				= 0;

	// //////////////////////////////////////////////////////
	// error variables
	// //////////////////////////////////////////////////////
	public Exception					error					= null;
	public String						lastError				= "";

	// //////////////////////////////////////////////////////
	// other variables
	// //////////////////////////////////////////////////////
	public long							sequenceValue			= 0;

	// //////////////////////////////////////////////////////
	// Override
	// //////////////////////////////////////////////////////
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Vector getDispatcherDefinition()
	{
		Vector vtReturn = new Vector();

		vtReturn.addAll(ThreadUtil.createInstanceParameter(this));
		vtReturn.addAll(ThreadUtil.createQueueParameter(this));
		vtReturn.addAll(ThreadUtil.createLogParameter(this));

		return vtReturn;
	}

	// //////////////////////////////////////////////////////
	// Override
	// //////////////////////////////////////////////////////
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Vector getParameterDefinition()
	{
		Vector vtReturn = getDispatcherDefinition();

		vtReturn.addAll(super.getParameterDefinition());

		return vtReturn;
	}

	// //////////////////////////////////////////////////////
	// Override
	// //////////////////////////////////////////////////////
	public void fillDispatcherParameter() throws AppException
	{
		try
		{
			loadCacheEnable = ThreadUtil.getBoolean(this, "loadCacheEnable", false);

			alarmEnable = ThreadUtil.getBoolean(this, "alarmEnable", false);

			neverExpire = ThreadUtil.getBoolean(this, "neverExpire", false);

			// get instance setting
			instanceEnable = ThreadUtil.getBoolean(this, "instanceEnable", false);

			if (instanceEnable)
			{
				instanceClass = ThreadUtil.getString(this, "instanceClass", true, "");

				instanceSize = ThreadUtil.getInt(this, "instanceSize", 1);
			}

			// get log setting
			logEnable = ThreadUtil.getBoolean(this, "logEnable", false);

			if (logEnable)
			{
				displayDebug = ThreadUtil.getBoolean(this, "displayDebug", false);

				logClass = ThreadUtil.getString(this, "logClass", true, "");

				log = Logger.getLogger(logClass);

				// setting log level
				logLevel = ThreadUtil.getString(this, "logLevel", true, "error");

				Level level = Level.ERROR;

				if (logLevel.equals(Constants.LOG_LEVEL_OFF))
				{
					level = Level.OFF;
				}
				else if (logLevel.equals(Constants.LOG_LEVEL_DEBUG))
				{
					level = Level.DEBUG;
				}
				else if (logLevel.equals(Constants.LOG_LEVEL_ERROR))
				{
					level = Level.ERROR;
				}
				else if (logLevel.equals(Constants.LOG_LEVEL_FATAL))
				{
					level = Level.FATAL;
				}
				else if (logLevel.equals(Constants.LOG_LEVEL_INFO))
				{
					level = Level.INFO;
				}
				else if (logLevel.equals(Constants.LOG_LEVEL_TRACE))
				{
					level = Level.TRACE;
				}
				else if (logLevel.equals(Constants.LOG_LEVEL_WARN))
				{
					level = Level.WARN;
				}

				log.setLevel(level);
			}

			// get queue setting
			queueDispatcherEnable = ThreadUtil.getBoolean(this, "queueDispatcherEnable", false);

			queueInstanceEnable = ThreadUtil.getBoolean(this, "queueInstanceEnable", false);

			if (queueDispatcherEnable || queueInstanceEnable)
			{
				temporaryQueue = ThreadUtil.getBoolean(this, "temporaryQueue", false);

				String mode = ThreadUtil.getString(this, "queueMode", true, "manual");

				if (mode.equalsIgnoreCase("manual"))
				{
					queueMode = Constants.QUEUE_MODE_MANUAL;
				}
				else if (mode.equalsIgnoreCase("consumer"))
				{
					queueMode = Constants.QUEUE_MODE_CONSUMER;
				}
				else if (mode.equalsIgnoreCase("producer"))
				{
					queueMode = Constants.QUEUE_MODE_PRODUCER;
				}
				else
				{
					throw new AppException("unknow-queue-mode");
				}

				queuePrefix = ThreadUtil.getString(this, "queuePrefix", false, "queue");

				queueName = ThreadUtil.getString(this, "queueName", false, "");

				queueSelector = ThreadUtil.getString(this, "queueSelector", false, "");
			}

			// date format
			String pattern = ThreadUtil.getString(this, "dateFormat", false, "dd/MM/yyyy");

			dateFormat = new SimpleDateFormat(pattern);
		}
		catch (AppException e)
		{
			logMonitor(e);

			throw e;
		}
		catch (Exception e)
		{
			logMonitor(e);

			throw new AppException(e.getMessage());
		}
		finally
		{
		}
	}

	// //////////////////////////////////////////////////////
	// Override
	// //////////////////////////////////////////////////////
	public void fillParameter() throws AppException
	{
		super.fillParameter();

		fillDispatcherParameter();
	}

	public int getDelayTime()
	{
		return miDelayTime;
	}

	public Logger getLog()
	{
		return log;
	}

	public boolean isAvailable()
	{
		return (miThreadCommand != ThreadConstant.THREAD_STOP && !mmgrMain.isServerLocked());
	}

	public void setInstances(Vector<DispatcherInstance> instances)
	{
		this.instances = instances;
	}

	public Vector<DispatcherInstance> getInstances()
	{
		return instances;
	}

	// ////////////////////////////////////////////////////////////////////////
	// load directory parameters
	// Author: ThangPV
	// Modify DateTime: 19/02/2003
	// /////////////////////////////////////////////////////////////////////////
	public void logMonitor(String strLog, boolean bSendMail)
	{
		if (bSendMail)
		{
			alertByMail(strLog);
		}

		final java.text.SimpleDateFormat fmt = new java.text.SimpleDateFormat("dd/MM HH:mm:ss:SSS");

		strLog = fmt.format(new java.util.Date()) + " " + strLog + "\r\n";

		log(strLog);
	}

	// ////////////////////////////////////////////////////////////////////////
	// load directory parameters
	// Author: ThangPV
	// Modify DateTime: 19/02/2003
	// /////////////////////////////////////////////////////////////////////////
	public synchronized void logMonitor(Object message)
	{
		Exception error = null;

		try
		{
			if (message instanceof Exception)
			{
				error = (Exception) message;

				log.error(error);

				if (!(message instanceof AppException))
				{
					error.printStackTrace();
				}
			}

			if (error instanceof InvocationTargetException)
			{
				Throwable target = ((InvocationTargetException) message).getTargetException();

				logMonitor(target.getMessage());
			}
			else if (message instanceof AppException)
			{
				AppException appException = (AppException) message;

				if (appException.getContext() != null)
				{
					logMonitor(appException.getMessage() + " : " + appException.getContext());
				}
				else
				{
					logMonitor(appException.getMessage());
				}
			}
			else if (message instanceof Exception)
			{
				Exception e = (Exception) message;

				logMonitor(e.getClass().getName() + ": " + e.getMessage());
			}
			else
			{
				logMonitor(message.toString());
			}
		}
		catch (Exception e)
		{
			// logMonitor(e.getMessage());
		}
	}

	// ////////////////////////////////////////////////////////////////////////
	// load directory parameters
	// Author: ThangPV
	// Modify DateTime: 19/02/2003
	// /////////////////////////////////////////////////////////////////////////
	public synchronized void debugMonitor(Object message)
	{
		try
		{
			if (displayDebug || (message instanceof Exception))
			{
				logMonitor(message);
			}

			if (log.isDebugEnabled())
			{
				log.debug(message);
			}
		}
		catch (Exception e)
		{

		}
	}

	// //////////////////////////////////////////////////////
	// process file
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void processAlarm(Serializable alarm)
	{
		if (alarmEnable)
		{
			try
			{
				Message message = QueueFactory.createObjectMessage(queueSession, alarm);

				message.setJMSExpiration(60000);

				QueueFactory.sendMessage(queueSession, QueueFactory.ALARM_QUEUE,
						message);
			}
			catch (Exception e)
			{
				logMonitor(e);
			}
		}
	}

	// //////////////////////////////////////////////////////
	// reset counter
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void resetCounter() throws Exception
	{
		totalCount = 0;
		successCount = 0;
		errorCount = 0;
		bypassCount = 0;
		insertCount = 0;
		updateCount = 0;

		minStamp = "";
		maxStamp = "";
	}

	// //////////////////////////////////////////////////////
	// process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public Message detachMessage() throws Exception
	{
		Message message = null;

		try
		{
			if (!queueDispatcherEnable)
			{
				return null;
			}

			if ((queueMode == Constants.QUEUE_MODE_CONSUMER) && (queueConsumer != null))
			{
				message = queueConsumer.receiveNoWait();
			}

			return message;
		}
		catch (Exception e)
		{
			throw e;
		}
	}

	// //////////////////////////////////////////////////////
	// after process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void loadCache() throws Exception
	{

	}

	// //////////////////////////////////////////////////////
	// process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void initQueue() throws Exception
	{
		try
		{
			// create a queue connection
			queueConnection = QueueFactory.createQueueConnection();

			// create a queue session
			queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);

			if (!queueName.equals("") && !temporaryQueue)
			{
				queueWorking = QueueFactory.getQueue(queueName);
			}

			if ((queueWorking != null) && !temporaryQueue && (queueMode == Constants.QUEUE_MODE_CONSUMER))
			{
				queueConsumer = queueSession.createConsumer(queueWorking, queueSelector);
			}
		}
		catch (NamingException e)
		{
			QueueFactory.resetContext();

			throw e;
		}
		catch (Exception e)
		{
			throw e;
		}
	}

	// //////////////////////////////////////////////////////
	// after process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void beforeProcessSession() throws Exception
	{
		try
		{
			logMonitor("Starting process session");

			if (loadCacheEnable)
			{
				loadCache();
			}

			resetCounter();

			if (queueDispatcherEnable)
			{
				initQueue();
			}

			getInstances().clear();

			checkInstance(false);
		}
		catch (Exception e)
		{
			throw e;
		}
	}

	// //////////////////////////////////////////////////////
	// after process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void afterProcessSession() throws Exception
	{
		try
		{
			for (int j = 0; j < getInstances().size(); j++)
			{
				getInstances().elementAt(j).stop();
			}
		}
		catch (Exception e)
		{
			logMonitor(e);
		}
		finally
		{
			QueueFactory.closeQueue(queueConsumer);
			QueueFactory.closeQueue(queueSession);
			QueueFactory.closeQueue(queueConnection);

			Database.closeObject(mcnMain);

			logMonitor("End of process session");
		}
	}

	// //////////////////////////////////////////////////////
	// process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public boolean isRunning() throws Exception
	{
		for (int j = 0; j < getInstances().size(); j++)
		{
			if (getInstances().elementAt(j).isRunning())
			{
				return true;
			}
		}

		return false;
	}

	public boolean isAutoLoop()
	{
		return neverExpire;
	}

	// //////////////////////////////////////////////////////
	// process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void checkInstance(boolean autoStart) throws Exception
	{
		if (instanceEnable)
		{
			int started = 0;
			int added = 0;

			if (instanceSize <= 0)
			{
				instanceSize = 1;
			}

			for (int j = 0; isAvailable() && (j < instanceSize); j++)
			{
				DispatcherInstance instance = null;

				if (j < getInstances().size())
				{
					instance = getInstances().elementAt(j);
				}

				if (instance == null)
				{
					instance = (DispatcherInstance) Class.forName(instanceClass).newInstance();

					instance.setDispatcher(this);

					if (j < getInstances().size())
					{
						getInstances().set(j, instance);
					}
					else
					{
						getInstances().add(instance);
					}
				}

				if (!instance.isRunning() && autoStart)
				{
					instance.start();

					added++;
				}
				else
				{
					started++;
				}
			}

			if (added > 0)
			{
				debugMonitor("Total " + started + " instances are started");
				debugMonitor("Total " + added + " instances are added");
			}
		}
	}

	// //////////////////////////////////////////////////////
	// process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void doProcessSession() throws Exception
	{
	}

	// //////////////////////////////////////////////////////
	// process session
	// Author : ThangPV
	// Created Date : 16/09/2004
	// //////////////////////////////////////////////////////
	public void processSession() throws Exception
	{
		try
		{
			beforeProcessSession();

			while (isAvailable())
			{
				checkInstance(true);

				doProcessSession();

				if (!isAutoLoop() && !isRunning())
				{
					break;
				}
				else if (isAvailable())
				{
					Thread.sleep(getDelayTime());
				}
			}
		}
		catch (Exception e)
		{
			// sendAlarmMessage(e);

			logMonitor(e);
		}
		finally
		{
			afterProcessSession();
		}
	}
	
	public void sendAlarmMessage(AlarmMessage alarm)
	{
		processAlarm(alarm);
	}

	/**
	 * Send alarm message to alarm queue<br>
	 * Created by NamTA<br>
	 * Created Date 27/08/2012
	 * 
	 * @param alarm
	 */
	public void sendAlarmMessage(Exception e, String cause, long provisioningId, String provisioningClass)
	{
		if (alarmEnable)
		{
			try
			{
				AlarmMessage alarm = new AlarmMessage();
				alarm.setCause(cause);
				alarm.setDescription(e.getMessage());
				StackTraceElement[] stackTraces = e.getStackTrace();
				String stackTraceMsg = "";
				for (StackTraceElement stackTrace : stackTraces)
				{
					stackTraceMsg += stackTrace.toString() + "\r\n";
				}
				alarm.setProvisioningId(provisioningId);
				alarm.setProvisioningClass(provisioningClass);
				alarm.setContent(stackTraceMsg);

				sendAlarmMessage(alarm);
			}
			catch (Exception ex)
			{
				logMonitor(ex);
			}
		}
	}
}
